;;;
;;; moplib.stub - extra built-ins
;;;  
;;;   Copyright (c) 2000-2003 Shiro Kawai, All rights reserved.
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;; $Id: moplib.stub,v 1.24.2.1 2004-12-24 12:50:35 shirok Exp $
;;;

"
#include <gauche/class.h>
#include <gauche/vminsn.h>
"

(define-type <slot-accessor> "ScmSlotAccessor*")
(define-type <method> "ScmMethod*")

;;
;; Internal routines
;;

"static ScmObj call_fallback_proc(ScmObj *args, int nargs, ScmGeneric *gf)
 {
  ScmObj proc = SCM_OBJ(gf->data);
  ScmObj arglist = Scm_ArrayToList(args, nargs);
  SCM_RETURN(Scm_VMApply(proc, arglist));
 }
"

(define-cproc %ensure-generic-function (name::<symbol> module::<module>)
  "  ScmObj val = Scm_SymbolValue(module, name);
  if (!Scm_TypeP(val, SCM_CLASS_GENERIC)) {
    if (SCM_SUBRP(val) || SCM_CLOSUREP(val)) {
      val = Scm_MakeBaseGeneric(SCM_OBJ(name), call_fallback_proc, val);
    } else {
      val = Scm_MakeBaseGeneric(SCM_OBJ(name), NULL, NULL);
    }
    Scm_Define(module, name, val);
  }
  SCM_RETURN(val);")

(define-cproc %make-next-method (gf methods::<list> args::<list>)
  "  ScmObj mp, *argv; int nargs = Scm_Length(args);
  if (!Scm_TypeP(gf, SCM_CLASS_GENERIC)) 
    Scm_Error(\"generic function requied, but got %S\", gf);
  SCM_FOR_EACH(mp, methods) {
    if (!Scm_TypeP(SCM_CAR(mp), SCM_CLASS_METHOD))
      Scm_Error(\"method required, but got %S\", SCM_CAR(mp));
  }
  argv = Scm_ListToArray(args, &nargs, NULL, TRUE);
  SCM_RETURN(Scm_MakeNextMethod(SCM_GENERIC(gf), methods, argv, nargs, FALSE));")

(define-cproc %method-code (method)
  "  ScmMethod *m;
  if (!Scm_TypeP(method, SCM_CLASS_METHOD))
    Scm_Error(\"method required, but got %S\", method);
  m = SCM_METHOD(method);
  if (m->func) SCM_RETURN(SCM_FALSE);
  else SCM_RETURN(SCM_OBJ(m->data));")

(define-cproc %start-class-redefinition! (k::<class>)
  (return <void> "Scm_StartClassRedefinition"))
(define-cproc %commit-class-redefinition! (k::<class> newk)
  (return <void> "Scm_CommitClassRedefinition"))
(define-cproc %check-class-binding (name module::<module>)
  (return "Scm_CheckClassBinding"))
(define-cproc %replace-class-binding! (k::<class> newk::<class>)
  (return <void> "Scm_ReplaceClassBinding"))
(define-cproc %add-direct-subclass! (super::<class> sub::<class>)
  (return <void> "Scm_AddDirectSubclass"))
(define-cproc %delete-direct-subclass! (super::<class> sub::<class>)
  (return <void> "Scm_DeleteDirectSubclass"))
(define-cproc %add-direct-method! (super::<class> m::<method>)
  (return <void> "Scm_AddDirectMethod"))
(define-cproc %delete-direct-method! (super::<class> m::<method>)
  (return <void> "Scm_DeleteDirectMethod"))

(define-cproc %transplant-instance! (src dst)
  (return <void> "Scm_TransplantInstance"))

;;
;; Public interface
;;

(define-cproc class-of (obj)
  (return "Scm_VMClassOf"))

;; current-class-of doesn't updates OBJ, and returns possibly the old class
;; which has been redefined.  Should onlyl used in class redefinition routines.
(define-cproc current-class-of (obj)
  "SCM_RETURN(SCM_OBJ(Scm_ClassOf(obj)));")

(define-cproc is-a? (obj klass::<class>)
  (return "Scm_VMIsA"))

(define-cproc slot-ref (obj slot)
  (inliner "SCM_VM_SLOT_REF")
  (setter slot-set!)
  "  SCM_RETURN(Scm_VMSlotRef(obj, slot, FALSE));")

(define-cproc slot-set! (obj slot value)
  (inliner "SCM_VM_SLOT_SET")
  (return "Scm_VMSlotSet"))

(define-cproc slot-bound? (obj slot)
  (return "Scm_VMSlotBoundP"))

(define-cproc slot-ref-using-accessor (obj accessor::<slot-accessor>)
  "  SCM_RETURN(Scm_VMSlotRefUsingAccessor(obj, accessor, FALSE));")

(define-cproc slot-bound-using-accessor? (obj accessor::<slot-accessor>)
  "  SCM_RETURN(Scm_VMSlotRefUsingAccessor(obj, accessor, TRUE));")

(define-cproc slot-set-using-accessor! (obj accessor::<slot-accessor> value)
  (return "Scm_VMSlotSetUsingAccessor"))

(define-cproc slot-initialize-using-accessor! (obj accessor::<slot-accessor>
                                                  initargs)
  (return "Scm_VMSlotInitializeUsingAccessor"))

(define-cproc instance-slot-ref (obj num::<fixnum>)
  (return "Scm_InstanceSlotRef"))

(define-cproc instance-slot-set (obj num::<fixnum> value)
  (return <void> "Scm_InstanceSlotSet"))

(define-cproc touch-instance! (obj)
  (return "Scm_VMTouchInstance"))

;; Local variables:
;; mode: scheme
;; end:
