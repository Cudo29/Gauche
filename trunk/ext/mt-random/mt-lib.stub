;;-*-Scheme-*-
;; 

"
#include \"mt-random.h\"
"

(define-type <mersenne-twister> "ScmMersenneTwister*")
(define-type <u32vector> "ScmU32Vector*")
(define-type <f32vector> "ScmF32Vector*")
(define-type <f64vector> "ScmF64Vector*")

(define-cproc mt-random-set-seed! (mt::<mersenne-twister> init) ::<void>
  Scm_MTSetSeed)

(define-cproc mt-random-get-state (mt::<mersenne-twister>)
  (let* ([v (Scm_MakeU32Vector (+ N 1) 0)])
    (dotimes (i N)
      (set! (aref (SCM_U32VECTOR_ELEMENTS v) i) (aref (-> mt mt) i)))
    (set! (aref (SCM_U32VECTOR_ELEMENTS v) N) (-> mt mti))
    (result v)))

(define-cproc mt-random-set-state! (mt::<mersenne-twister> state::<u32vector>)
  ::<void>
  (unless (== (SCM_U32VECTOR_SIZE state) (+ N 1))
    (Scm_Error "u32vector of length %d is required, but got length %d"
               (+ N 1) (SCM_U32VECTOR_SIZE state)))
  (dotimes [i N]
    (set! (aref (-> mt mt) i)
          (aref (SCM_U32VECTOR_ELEMENTS state) i)))
  (set! (-> mt mti) (aref (SCM_U32VECTOR_ELEMENTS state) N)))

(define-cproc mt-random-real (mt::<mersenne-twister>) ::<double>
  (result (Scm_MTGenrandF64 mt TRUE)))

(define-cproc mt-random-real0 (mt::<mersenne-twister>) ::<double>
  (result (Scm_MTGenrandF64 mt FALSE)))

(define-cproc %mt-random-integer (mt::<mersenne-twister> n)
  Scm_MTGenrandInt)

(define-cproc %mt-random-uint32 (mt::<mersenne-twister>) ::<ulong>
  Scm_MTGenrandU32)

(define-cproc mt-random-fill-u32vector! (mt::<mersenne-twister> v::<u32vector>)
  (let* ([p::ScmUInt32* (SCM_U32VECTOR_ELEMENTS v)])
    (dotimes [i (SCM_U32VECTOR_SIZE v)]
      (set! (* (post++ p)) (Scm_MTGenrandU32 mt)))
    (result (SCM_OBJ v))))

(define-cproc mt-random-fill-f32vector! (mt::<mersenne-twister> v::<f32vector>)
  (let* ([p::float* (SCM_F32VECTOR_ELEMENTS v)])
    (dotimes [i (SCM_F32VECTOR_SIZE v)]
      (set! (* (post++ p)) (Scm_MTGenrandF32 mt TRUE)))
    (result (SCM_OBJ v))))

(define-cproc mt-random-fill-f64vector! (mt::<mersenne-twister> v::<f64vector>)
  (let* ([p::double* (SCM_F64VECTOR_ELEMENTS v)])
    (dotimes [i (SCM_F64VECTOR_SIZE v)]
      (set! (* (post++ p)) (Scm_MTGenrandF64 mt TRUE)))
    (result (SCM_OBJ v))))


