;;;
;;; binaryio.stub - primitive binary i/o interface
;;;  
;;;   Copyright (c) 2004-2010  Shiro Kawai  <shiro@acm.org>
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  

"#include \"binary.h\"
"

(define-type <uvector> "ScmUVector*")

(define-cproc read-u8
  (:optional (port::<input-port>? #f) (endian::<symbol>? #f))
  Scm_ReadBinaryU8)
(define-cproc read-u16
  (:optional (port::<input-port>? #f) (endian::<symbol>? #f))
  Scm_ReadBinaryU16)
(define-cproc read-u32
  (:optional (port::<input-port>? #f) (endian::<symbol>? #f))
  Scm_ReadBinaryU32)
(define-cproc read-u64
  (:optional (port::<input-port>? #f) (endian::<symbol>? #f))
  Scm_ReadBinaryU64)

(define-cproc read-s8
  (:optional (port::<input-port>? #f) (endian::<symbol>? #f))
  Scm_ReadBinaryS8)
(define-cproc read-s16
  (:optional (port::<input-port>? #f) (endian::<symbol>? #f))
  Scm_ReadBinaryS16)
(define-cproc read-s32
  (:optional (port::<input-port>? #f) (endian::<symbol>? #f))
  Scm_ReadBinaryS32)
(define-cproc read-s64
  (:optional (port::<input-port>? #f) (endian::<symbol>? #f))
  Scm_ReadBinaryS64)

(define-cproc write-u8
  (intval::<integer>
   :optional (port::<output-port>? #f) (endian::<symbol>? #f))
  ::<void> Scm_WriteBinaryU8)
(define-cproc write-u16
  (intval::<integer>
   :optional (port::<output-port>? #f) (endian::<symbol>? #f))
  ::<void> Scm_WriteBinaryU16)
(define-cproc write-u32
  (intval::<integer>
   :optional (port::<output-port>? #f) (endian::<symbol>? #f))
  ::<void> Scm_WriteBinaryU32)
(define-cproc write-u64
  (intval::<integer>
   :optional (port::<output-port>? #f) (endian::<symbol>? #f))
  ::<void> Scm_WriteBinaryU64)
(define-cproc write-s8
  (intval::<integer>
   :optional (port::<output-port>? #f) (endian::<symbol>? #f))
  ::<void> Scm_WriteBinaryS8)
(define-cproc write-s16
  (intval::<integer>
   :optional (port::<output-port>? #f) (endian::<symbol>? #f))
  ::<void> Scm_WriteBinaryS16)
(define-cproc write-s32
  (intval::<integer>
   :optional (port::<output-port>? #f) (endian::<symbol>? #f))
  ::<void> Scm_WriteBinaryS32)
(define-cproc write-s64
  (intval::<integer>
   :optional (port::<output-port>? #f) (endian::<symbol>? #f))
  ::<void> Scm_WriteBinaryS64)

(define-cproc read-f16
  (:optional (port::<input-port>? #f) (endian::<symbol>? #f))
  Scm_ReadBinaryF16)
(define-cproc read-f32
  (:optional (port::<input-port>? #f) (endian::<symbol>? #f))
  Scm_ReadBinaryF32)
(define-cproc read-f64
  (:optional (port::<input-port>? #f) (endian::<symbol>? #f))
  Scm_ReadBinaryF64)

(define-cproc write-f16
  (val::<number>
   :optional (port::<output-port>? #f) (endian::<symbol>? #f))
  ::<void> Scm_WriteBinaryF16)
(define-cproc write-f32
  (val::<number>
   :optional (port::<output-port>? #f) (endian::<symbol>? #f))
  ::<void> Scm_WriteBinaryF32)
(define-cproc write-f64
  (val::<number>
   :optional (port::<output-port>? #f) (endian::<symbol>? #f))
  ::<void> Scm_WriteBinaryF64)

(define-cproc get-u8
  (v::<uvector> off::<uint> :optional (endian::<symbol>? #f))
  Scm_GetBinaryU8)
(define-cproc get-s8
  (v::<uvector> off::<uint> :optional (endian::<symbol>? #f))
  Scm_GetBinaryS8)
(define-cproc get-u16
  (v::<uvector> off::<uint> :optional (endian::<symbol>? #f))
  Scm_GetBinaryU16)
(define-cproc get-s16
  (v::<uvector> off::<uint> :optional (endian::<symbol>? #f))
  Scm_GetBinaryS16)
(define-cproc get-u32
  (v::<uvector> off::<uint> :optional (endian::<symbol>? #f))
  Scm_GetBinaryU32)
(define-cproc get-s32
  (v::<uvector> off::<uint> :optional (endian::<symbol>? #f))
  Scm_GetBinaryS32)
(define-cproc get-u64
  (v::<uvector> off::<uint> :optional (endian::<symbol>? #f))
  Scm_GetBinaryU64)
(define-cproc get-s64
  (v::<uvector> off::<uint> :optional (endian::<symbol>? #f))
  Scm_GetBinaryS64)
(define-cproc get-f16
  (v::<uvector> off::<uint> :optional (endian::<symbol>? #f))
  Scm_GetBinaryF16)
(define-cproc get-f32
  (v::<uvector> off::<uint> :optional (endian::<symbol>? #f))
  Scm_GetBinaryF32)
(define-cproc get-f64
  (v::<uvector> off::<uint> :optional (endian::<symbol>? #f))
  Scm_GetBinaryF64)

(define-cproc put-u8!
  (v::<uvector> off::<uint> val :optional (endian::<symbol>? #f))
  ::<void> Scm_PutBinaryU8)
(define-cproc put-s8!
  (v::<uvector> off::<uint> val :optional (endian::<symbol>? #f))
  ::<void> Scm_PutBinaryS8)
(define-cproc put-u16!
  (v::<uvector> off::<uint> val :optional (endian::<symbol>? #f))
  ::<void> Scm_PutBinaryU16)
(define-cproc put-s16!
  (v::<uvector> off::<uint> val :optional (endian::<symbol>? #f))
  ::<void> Scm_PutBinaryS16)
(define-cproc put-u32!
  (v::<uvector> off::<uint> val :optional (endian::<symbol>? #f))
  ::<void> Scm_PutBinaryU32)
(define-cproc put-s32!
  (v::<uvector> off::<uint> val :optional (endian::<symbol>? #f))
  ::<void> Scm_PutBinaryS32)
(define-cproc put-u64!
  (v::<uvector> off::<uint> val :optional (endian::<symbol>? #f))
  ::<void> Scm_PutBinaryU64)
(define-cproc put-s64!
  (v::<uvector> off::<uint> val :optional (endian::<symbol>? #f))
  ::<void> Scm_PutBinaryS64)
(define-cproc put-f16!
  (v::<uvector> off::<uint> val :optional (endian::<symbol>? #f))
  ::<void> Scm_PutBinaryF16)
(define-cproc put-f32!
  (v::<uvector> off::<uint> val :optional (endian::<symbol>? #f))
  ::<void> Scm_PutBinaryF32)
(define-cproc put-f64!
  (v::<uvector> off::<uint> val :optional (endian::<symbol>? #f))
  ::<void> Scm_PutBinaryF64)

(define-cproc get-u16be (v::<uvector> off::<uint>)
  (result (Scm_GetBinaryU16 v off (SCM_SYMBOL SCM_SYM_BIG_ENDIAN))))
(define-cproc get-u16le (v::<uvector> off::<uint>)
  (result (Scm_GetBinaryU16 v off (SCM_SYMBOL SCM_SYM_LITTLE_ENDIAN))))
(define-cproc get-s16be (v::<uvector> off::<uint>)
  (result (Scm_GetBinaryS16 v off (SCM_SYMBOL SCM_SYM_BIG_ENDIAN))))
(define-cproc get-s16le (v::<uvector> off::<uint>)
  (result (Scm_GetBinaryS16 v off (SCM_SYMBOL SCM_SYM_LITTLE_ENDIAN))))
(define-cproc get-u32be (v::<uvector> off::<uint>)
  (result (Scm_GetBinaryU32 v off (SCM_SYMBOL SCM_SYM_BIG_ENDIAN))))
(define-cproc get-u32le (v::<uvector> off::<uint>)
  (result (Scm_GetBinaryU32 v off (SCM_SYMBOL SCM_SYM_LITTLE_ENDIAN))))
(define-cproc get-s32be (v::<uvector> off::<uint>)
  (result (Scm_GetBinaryS32 v off (SCM_SYMBOL SCM_SYM_BIG_ENDIAN))))
(define-cproc get-s32le (v::<uvector> off::<uint>)
  (result (Scm_GetBinaryS32 v off (SCM_SYMBOL SCM_SYM_LITTLE_ENDIAN))))
(define-cproc get-u64be (v::<uvector> off::<uint>)
  (result (Scm_GetBinaryU64 v off (SCM_SYMBOL SCM_SYM_BIG_ENDIAN))))
(define-cproc get-u64le (v::<uvector> off::<uint>)
  (result (Scm_GetBinaryU64 v off (SCM_SYMBOL SCM_SYM_LITTLE_ENDIAN))))
(define-cproc get-s64be (v::<uvector> off::<uint>)
  (result (Scm_GetBinaryS64 v off (SCM_SYMBOL SCM_SYM_BIG_ENDIAN))))
(define-cproc get-s64le (v::<uvector> off::<uint>)
  (result (Scm_GetBinaryS64 v off (SCM_SYMBOL SCM_SYM_LITTLE_ENDIAN))))
(define-cproc get-f16be (v::<uvector> off::<uint>)
  (result (Scm_GetBinaryF16 v off (SCM_SYMBOL SCM_SYM_BIG_ENDIAN))))
(define-cproc get-f16le (v::<uvector> off::<uint>)
  (result (Scm_GetBinaryF16 v off (SCM_SYMBOL SCM_SYM_LITTLE_ENDIAN))))
(define-cproc get-f32be (v::<uvector> off::<uint>)
  (result (Scm_GetBinaryF32 v off (SCM_SYMBOL SCM_SYM_BIG_ENDIAN))))
(define-cproc get-f32le (v::<uvector> off::<uint>)
  (result (Scm_GetBinaryF32 v off (SCM_SYMBOL SCM_SYM_LITTLE_ENDIAN))))
(define-cproc get-f64be (v::<uvector> off::<uint>)
  (result (Scm_GetBinaryF64 v off (SCM_SYMBOL SCM_SYM_BIG_ENDIAN))))
(define-cproc get-f64le (v::<uvector> off::<uint>)
  (result (Scm_GetBinaryF64 v off (SCM_SYMBOL SCM_SYM_LITTLE_ENDIAN))))

(define-cproc put-u16be! (v::<uvector> off::<uint> val) ::<void>
  (Scm_PutBinaryU16 v off val (SCM_SYMBOL SCM_SYM_BIG_ENDIAN)))
(define-cproc put-u16le! (v::<uvector> off::<uint> val) ::<void>
  (Scm_PutBinaryU16 v off val (SCM_SYMBOL SCM_SYM_LITTLE_ENDIAN)))
(define-cproc put-s16be! (v::<uvector> off::<uint> val) ::<void>
  (Scm_PutBinaryS16 v off val (SCM_SYMBOL SCM_SYM_BIG_ENDIAN)))
(define-cproc put-s16le! (v::<uvector> off::<uint> val) ::<void>
  (Scm_PutBinaryS16 v off val (SCM_SYMBOL SCM_SYM_LITTLE_ENDIAN)))
(define-cproc put-u32be! (v::<uvector> off::<uint> val) ::<void>
  (Scm_PutBinaryU32 v off val (SCM_SYMBOL SCM_SYM_BIG_ENDIAN)))
(define-cproc put-u32le! (v::<uvector> off::<uint> val) ::<void>
  (Scm_PutBinaryU32 v off val (SCM_SYMBOL SCM_SYM_LITTLE_ENDIAN)))
(define-cproc put-s32be! (v::<uvector> off::<uint> val ) ::<void>
  (Scm_PutBinaryS32 v off val (SCM_SYMBOL SCM_SYM_BIG_ENDIAN)))
(define-cproc put-s32le! (v::<uvector> off::<uint> val ) ::<void>
  (Scm_PutBinaryS32 v off val (SCM_SYMBOL SCM_SYM_LITTLE_ENDIAN)))
(define-cproc put-u64be! (v::<uvector> off::<uint> val ) ::<void>
  (Scm_PutBinaryU64 v off val (SCM_SYMBOL SCM_SYM_BIG_ENDIAN)))
(define-cproc put-u64le! (v::<uvector> off::<uint> val ) ::<void>
  (Scm_PutBinaryU64 v off val (SCM_SYMBOL SCM_SYM_LITTLE_ENDIAN)))
(define-cproc put-s64be! (v::<uvector> off::<uint> val ) ::<void>
  (Scm_PutBinaryS64 v off val (SCM_SYMBOL SCM_SYM_BIG_ENDIAN)))
(define-cproc put-s64le! (v::<uvector> off::<uint> val ) ::<void>
  (Scm_PutBinaryS64 v off val (SCM_SYMBOL SCM_SYM_LITTLE_ENDIAN)))
(define-cproc put-f16be! (v::<uvector> off::<uint> val) ::<void>
  (Scm_PutBinaryF16 v off val (SCM_SYMBOL SCM_SYM_BIG_ENDIAN)))
(define-cproc put-f16le! (v::<uvector> off::<uint> val) ::<void>
  (Scm_PutBinaryF16 v off val (SCM_SYMBOL SCM_SYM_LITTLE_ENDIAN)))
(define-cproc put-f32be! (v::<uvector> off::<uint> val) ::<void>
  (Scm_PutBinaryF32 v off val (SCM_SYMBOL SCM_SYM_BIG_ENDIAN)))
(define-cproc put-f32le! (v::<uvector> off::<uint> val) ::<void>
  (Scm_PutBinaryF32 v off val (SCM_SYMBOL SCM_SYM_LITTLE_ENDIAN)))
(define-cproc put-f64be! (v::<uvector> off::<uint> val) ::<void>
  (Scm_PutBinaryF64 v off val (SCM_SYMBOL SCM_SYM_BIG_ENDIAN)))
(define-cproc put-f64le! (v::<uvector> off::<uint> val) ::<void>
  (Scm_PutBinaryF64 v off val (SCM_SYMBOL SCM_SYM_LITTLE_ENDIAN)))

;; Local variables:
;; mode: scheme
;; end:
