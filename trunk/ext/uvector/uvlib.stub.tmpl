///; Process this file with uvgen.scm to generate uvect.c
///; Lines beginning with '///' are directives for ugven.scm.

///;; Prologue ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
///(define *tmpl-prologue* '(
;;;
;;; uvlib.stub - uniform vector library
;;;  
;;;   Copyright (c) 2000-2007 Shiro Kawai, All rights reserved.
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  

"
#include <math.h>
#define EXTUVECTOR_EXPORTS
#include \"gauche/uvector.h\"
#include \"uvectorP.h\"
"

(define-cfn clamp-arg (clamp) ::int :static
  (cond [(SCM_EQ clamp 'both) (return SCM_CLAMP_BOTH)]
        [(SCM_EQ clamp 'low)  (return SCM_CLAMP_LO)]
        [(SCM_EQ clamp 'high) (return SCM_CLAMP_HI)]
        [(not (or (SCM_FALSEP clamp) (SCM_UNBOUNDP clamp)))
         (Scm_Error "clamp argument must be either 'both, 'high, 'low or #f, \
                    but got %S" clamp)])
  (return SCM_CLAMP_ERROR))

///)) ;; End prologue

///;; Begin template ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
///;; 
///(define *tmpl-body* '(

;;--------------------------------------------------------------------
;; ${t}vector basic API
;;
(define-cproc ${t}vector? (obj) ::<boolean> SCM_${T}VECTORP)

;; we need this in string, for the UNBOX macro is substituted to the
;; literal C code instead of CISE code.
"#define ${t}unboxer(filler, fill) ${UNBOX filler fill SCM_CLAMP_ERROR}"

(define-cproc make-${t}vector (length::<fixnum> :optional (fill 0))
  (let* ([filler :: (${etype})])
    (${t}unboxer filler fill)
    (result (Scm_Make${T}Vector length filler))))

(define-cproc ${t}vector (:optarray (elts nelts 10) :rest args)
  :fast-flonum
  (cond [(SCM_NULLP args)
         (result (Scm_ObjArrayTo${T}Vector elts nelts SCM_CLAMP_ERROR))]
        [else
         (let* ([i::int (- nelts 1)] [p args])
           (for [() (>= i 0) (post-- i)]
                (SCM_FLONUM_ENSURE_MEM (aref elts i))
                (set! p (Scm_Cons (aref elts i) p)))
           (result (Scm_ListTo${T}Vector p SCM_CLAMP_ERROR)))]))

(define-cproc ${t}vector-length (v::<${t}vector>) ::<int> SCM_${T}VECTOR_SIZE)

(define-cproc ${t}vector-ref
  (v::<${t}vector> i::<fixnum> :optional fallback) :fast-flonum
  (setter ${t}vector-set!)
  Scm_VM${T}VectorRef)

(define-cproc ${t}vector-set!
  (v::<${t}vector> i::<fixnum> val :optional clamp) :fast-flonum
  (result (Scm_${T}VectorSet v i val (clamp_arg clamp))))

(define-cproc ${t}vector-copy
  (v::<${t}vector> :optional (start::<fixnum> 0) (end::<fixnum> -1))
  Scm_${T}VectorCopy)

;; NB: this function accomodates to two APIs.
;; The 'modern' API, compatible to srfi-13 and srfi-43, takes arguments:
;;    (dst dstart src :optional sstart send)
;; The old API only takes:
;;    (dst src)
;; We dispatch by the second argument.  The old API is deprecated, but
;; kept for the existing code.
(define-cproc ${t}vector-copy!
  (dst::<${t}vector> dstart :optional src (sstart::<int> 0) (send::<int> -1))
  (cond
   [(SCM_INTEGERP dstart) ; new API
    (unless (SCM_${T}VECTORP src)
      (Scm_Error "${t}vector-copy!: argument is not a matching uvector: %S"src))
    (result (Scm_${T}VectorCopyX dst (Scm_GetInteger dstart)
                  (SCM_${T}VECTOR src) sstart send))]
   [(SCM_${T}VECTORP dstart) ; old API
    (result (Scm_${T}VectorCopyX dst 0 (SCM_${T}VECTOR dstart) 0 -1))]
   [else (SCM_TYPE_ERROR dstart "integer") (result SCM_UNDEFINED)]))

(define-cproc ${t}vector->list
  (v::<${t}vector> :optional (start::<fixnum> 0) (end::<fixnum> -1))
  Scm_${T}VectorToList)

(define-cproc list->${t}vector (l::<list> :optional clamp)
  (result (Scm_ListTo${T}Vector l (clamp-arg clamp))))

(define-cproc ${t}vector-fill!
  (v::<${t}vector> val :optional (start::<fixnum> 0) (end::<fixnum> -1))
  (let* ([filler :: (${etype})])
    (${t}unboxer filler val)
    (result (Scm_${T}VectorFill v filler start end))))

(define-cproc ${t}vector->vector
  (v::<${t}vector> :optional (start::<fixnum> 0) (end::<fixnum> -1))
  Scm_${T}VectorToVector)

(define-cproc vector->${t}vector
  (v::<vector> :optional (start::<fixnum> 0) (end::<fixnum> -1) clamp)
  (result (Scm_VectorTo${T}Vector v start end (clamp-arg clamp))))

///)) ;; end of tmpl-body

///(define *tmpl-numop* '(
(define-cproc ${t}vector-${opname} (v0::<${t}vector> v1 :optional clamp)
  :fast-flonum
  (result (Scm_${T}Vector${Opname} v0 v1 (clamp-arg clamp))))

(define-cproc ${t}vector-${opname}! (v0::<${t}vector> v1 :optional clamp)
  :fast-flonum
  (result (Scm_${T}Vector${Opname}X v0 v1 (clamp-arg clamp))))
///)) ;; end of tmpl-numop

///(define *tmpl-bitop* '(
(define-cproc ${t}vector-${opname} (v0::<${t}vector> v1)
  (result (Scm_${T}Vector${Opname} v0 v1)))

(define-cproc ${t}vector-${opname}! (v0::<${t}vector> v1)
  (result (Scm_${T}Vector${Opname}X v0 v1)))
///)) ;; end of tmpl-bitop

///(define *tmpl-dotop* '(
(define-cproc ${t}vector-dot (v0::<${t}vector> v1) Scm_VM${T}VectorDotProd)
///)) ;; end of tmpl-dotop

///(define *tmpl-rangeop* '(
(define-cproc ${t}vector-${opname} (v0::<${t}vector> min max)
  Scm_${T}Vector${Opname})
///)) ;; end of tmpl-rangeop

///(define *tmpl-swapb* '(
(define-cproc ${t}vector-swap-bytes (v0::<${t}vector>) Scm_${T}VectorSwapBytes)
(define-cproc ${t}vector-swap-bytes!(v0::<${t}vector>) Scm_${T}VectorSwapBytesX)
///)) ;; end of tmpl-rangeop

///(define *extra-procedure*  ;; procedurally generates code
///  (lambda ()
///    (generate-numop)
///    (generate-bitop)
///    (generate-dotop)
///    (generate-rangeop)
///    (generate-swapb)
///)) ;; end of extra-procedure

///(define *tmpl-epilogue* '(

;;; generic procedures

(define-cproc uvector-alias
  (klass::<class> v::<uvector> :optional (start::<int> 0) (end::<int> -1))
  Scm_UVectorAlias)

(define-cise-stmt swap-bytes-common
  [(_ c-fn v type)
   `(let* ([opt::int SWAPB_STD])
      (cond [(== ,type NULL)]
            [(SCM_EQ (SCM_OBJ ,type) 'le:arm-le) (= opt SWAPB_ARM_LE)]
            [(SCM_EQ (SCM_OBJ ,type) 'be:arm-le) (= opt SWAPB_ARM_BE)]
            [else (Scm_TypeError "type" "#f or a symbol le:arm-le or be:arm-le"
                                 (SCM_OBJ ,type))])
      (,c-fn ,v opt))])

(define-cproc uvector-swap-bytes (v::<uvector> :optional (type::<symbol>? #f))
  (swap-bytes-common Scm_UVectorSwapBytes v type))

(define-cproc uvector-swap-bytes! (v::<uvector> :optional (type::<symbol>? #f))
  (swap-bytes-common Scm_UVectorSwapBytesX v type))

(define-cproc uvector-size (v::<uvector>
                            :optional (start::<int> 0) (end::<int> -1)) ::<int>
  (let* ([len::int (SCM_UVECTOR_SIZE v)])
    (SCM_CHECK_START_END start end len)
    (result (* (- end start)
               (Scm_UVectorElementSize (Scm_ClassOf (SCM_OBJ v)))))))

(define-cproc read-block! (v::<uvector>
                           :optional (port::<input-port> (current-input-port))
                                     (start::<fixnum> 0)
                                     (end::<fixnum> -1)
                                     (endian::<symbol>? #f))
  Scm_ReadBlockX)

(define-cproc write-block (v::<uvector>
                           :optional (port::<output-port> (current-output-port))
                                     (start::<fixnum> 0)
                                     (end::<fixnum> -1)
                                     (endian::<symbol>? #f))
  Scm_WriteBlock)

;;; String operations 

(define-cfn string->bytevector
  (klass::ScmClass* s::ScmString* start::int end::int) :static
  (let* ([size::u_int] [len::u_int]
         [ss::(const char*) (Scm_GetStringContent s (& size) (& len) NULL)])
    (SCM_CHECK_START_END start end (cast int len))
    (let* ([sp::(const char*) (?: (== start 0) ss (Scm_StringPosition s start))]
           [ep::(const char*) (?: (== end len) (+ ss size) (Scm_StringPosition s end))]
           [buf::char* (SCM_NEW_ATOMIC2 (char*) (- ep sp))])
      (memcpy buf sp (- ep sp))
      (return (Scm_MakeUVectorFull klass (cast int (- ep sp)) buf FALSE NULL)))))
  
(define-cproc string->s8vector
  (s::<string> :optional (start::<fixnum> 0) (end::<fixnum> -1))
  (result (string->bytevector SCM_CLASS_S8VECTOR s start end)))

(define-cproc string->u8vector
  (s::<string> :optional (start::<fixnum> 0) (end::<fixnum> -1))
  (result (string->bytevector SCM_CLASS_U8VECTOR s start end)))

(define-cfn string->bytevector!
  (v::ScmUVector* tstart::int s::ScmString* start::int end::int) :static
  (let* ([tlen::int (SCM_UVECTOR_SIZE v)])
    (when (and (>= tstart 0) (< tstart tlen))
      (SCM_UVECTOR_CHECK_MUTABLE v)
      (let* ([size::u_int] [len::u_int]
             [ss::(const char*) (Scm_GetStringContent s (& size) (& len) NULL)])
        (SCM_CHECK_START_END start end (cast int len))
        (let* ([sp::(const char*)
                    (?: (== start 0) ss (Scm_StringPosition s start))]
               [ep::(const char*)
                    (?: (== end len) (+ ss size) (Scm_StringPosition s end))]
               [buf::(char*) (+ (cast char* (SCM_UVECTOR_ELEMENTS v)) tstart)])
          (if (> (- tlen tstart) (- ep sp))
            (memcpy buf sp (- ep sp))
            (memcpy buf sp (- tlen tstart))))))
    (return (SCM_OBJ v))))
               
(define-cproc string->s8vector! (v::<s8vector>
                                 tstart::<int>
                                 s::<string>
                                 :optional (start::<fixnum> 0)
                                           (end::<fixnum> -1))
  (result (string->bytevector! (SCM_UVECTOR v) tstart s start end)))

(define-cproc string->u8vector! (v::<u8vector>
                                 tstart::<int>
                                 s::<string>
                                 :optional (start::<fixnum> 0)
                                           (end::<fixnum> -1))
  (result (string->bytevector! (SCM_UVECTOR v) tstart s start end)))

(define-cfn bytevector->string (v::ScmUVector* start::int end::int) :static
  (let* ([len::int (SCM_UVECTOR_SIZE v)])
    (SCM_CHECK_START_END start end len)
    (return (Scm_MakeString (+ (cast char* (SCM_UVECTOR_ELEMENTS v)) start)
                            (- end start) -1 SCM_STRING_COPYING))))

(define-cproc s8vector->string (v::<s8vector>
                                :optional (start::<fixnum> 0)
                                          (end::<fixnum> -1))
  (result (bytevector->string (SCM_UVECTOR v) start end)))

(define-cproc u8vector->string (v::<u8vector>
                                :optional (start::<fixnum> 0)
                                          (end::<fixnum> -1))
  (result (bytevector->string (SCM_UVECTOR v) start end)))

(define-cfn string->wordvector
  (klass::ScmClass* s::ScmString* start::int end::int) :static
  (let* ([size::u_int] [len::u_int]
         [ss::(const char*) (Scm_GetStringContent s (& size) (& len) NULL)])
    (SCM_CHECK_START_END start end (cast int len))
    (let* ([sp::(const char*)
                (?: (== start 0) ss (Scm_StringPosition s start))]
           [ep::(const char*)
                (?: (== end len) (+ ss size) (Scm_StringPosition s end))]
           [v (Scm_MakeUVector klass (- end start) NULL)]
           [eltp::ScmInt32* (cast ScmInt32* (SCM_UVECTOR_ELEMENTS v))]
           [i::int 0])
      (for [() (< sp ep) (post++ i)]
           (let* ([ch::ScmChar])
             (SCM_CHAR_GET sp ch)
             (set! (aref eltp i) ch)
             (+= sp (SCM_CHAR_NBYTES ch))))
      (return v))))

(define-cproc string->s32vector (s::<string>
                                 :optional (start::<fixnum> 0)
                                           (end::<fixnum> -1))
  (result (string->wordvector SCM_CLASS_S32VECTOR s start end)))

(define-cproc string->u32vector (s::<string>
                                 :optional (start::<fixnum> 0)
                                           (end::<fixnum> -1))
  (result (string->wordvector SCM_CLASS_U32VECTOR s start end)))

(define-cfn wordvector->string (v::ScmUVector* start::int end::int) :static
  (let* ([len::int (SCM_UVECTOR_SIZE v)]
         [s (Scm_MakeOutputStringPort FALSE)])
    (SCM_CHECK_START_END start end len)
    (let* ([eltp::ScmInt32* (cast ScmInt32* (SCM_UVECTOR_ELEMENTS v))])
      (while (< start end)
        (let* ([ch::ScmChar (cast ScmChar (aref eltp (post++ start)))])
          (Scm_PutcUnsafe ch (SCM_PORT s)))))
    (return (Scm_GetOutputStringUnsafe (SCM_PORT s) 0))))
    
(define-cproc s32vector->string (v::<s32vector>
                                 :optional (start::<fixnum> 0)
                                           (end::<fixnum> -1))
  (result (wordvector->string (SCM_UVECTOR v) start end)))

(define-cproc u32vector->string (v::<u32vector>
                                 :optional (start::<fixnum> 0)
                                           (end::<fixnum> -1))
  (result (wordvector->string (SCM_UVECTOR v) start end)))

///)) ;; end of tmpl-epilogue


///; Local variables:
///; mode: scheme
///; end:
