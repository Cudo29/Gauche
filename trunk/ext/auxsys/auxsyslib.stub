;;;
;;; auxsyslib.stub - auxiliary system interface
;;;  
;;;   Copyright (c) 2000-2010  Shiro Kawai  <shiro@acm.org>
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  

"
#include \"auxsysconf.h\"
#if TIME_WITH_SYS_TIME
# include <sys/time.h>
# include <time.h>
#else
# if HAVE_SYS_TIME_H
#  include <sys/time.h>
# else
#  include <time.h>
# endif
#endif

#ifdef HAVE_SYS_LOADAVG_H
#  include <sys/loadavg.h>
#endif /*HAVE_SYS_LOADAVG_H*/

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif /*HAVE_UNISTD_H*/

#include <stdlib.h>
#include <math.h>
#include <locale.h>
#include <sys/types.h>
#include <sys/stat.h>
#if !defined(GAUCHE_WINDOWS)
#  include <utime.h>
#  include <sys/times.h>
#  include <sys/utsname.h>
#else  /*GAUCHE_WINDOWS*/
#undef _SC_CLK_TCK  /* avoid undefined reference to sysconf */
#endif /*GAUCHE_WINDOWS*/

#if defined(_MSC_VER)
/* This is a kludge to patch the defect of auxsysconf.h misconfiguration. */
#undef HAVE_GETDOMAINNAME
#undef HAVE_UNSETENV
#undef HAVE_GETPGID
#endif /*_MSC_VER*/

extern void Scm_SetEnv(const char *name, const char *value, int overwrite);
extern ScmObj Scm_Environ(void);
"

;; stdlib.h
(define-cproc sys-abort () ::<void> abort)

;; NB: sys-realpath is moved to auxsys.scm

;; math.h
(define-cproc fmod (x::<real> y::<real>) ::<double> fmod)

(define-cproc frexp (d::<real>) ::(<double> <int>)
  (set! SCM_RESULT0 (frexp d (& SCM_RESULT1))))

(define-cproc modf (x::<real>) ::(<double> <double>)
  (set! SCM_RESULT0 (modf x (& SCM_RESULT1))))

(define-cproc ldexp (x::<real> exp::<int>) ::<real> ldexp)

(define-cproc log10 (x::<real>) ::<real> log10)

;; sys/loadavg.h
(when "defined HAVE_GETLOADAVG"
  (define-cproc sys-getloadavg (:optional (nsamples::<int> 3))
    (let* ([samples::(.array double [3])])
      (when (or (<= nsamples 0) (> nsamples 3))
        (Scm_Error "sys-getloadavg: argument out of range: %d" samples))
      (let* ([count::int (getloadavg samples nsamples)])
        (if (< count 0)
          (result '#f)
          (let* ([h '()] [t '()])
            (dotimes [i count]
              (let* ([n (Scm_MakeFlonum (aref samples i))])
                (SCM_APPEND1 h t n)))
            (result h))))))
  (initcode "Scm_AddFeature(\"gauche.sys.getloadavg\", NULL);")
  )

;; sys/stat.h
(if "!defined(GAUCHE_WINDOWS)"
(define-cproc sys-mkfifo (path::<const-cstring> mode::<int>) ::<int>
  (SCM_SYSCALL SCM_RESULT (mkfifo path mode))
  (when (< SCM_RESULT 0) (Scm_SysError "mkfifo failed on %s" path)))
)

;; utime.h
(define-cproc sys-utime
  (path::<const-cstring> :optional (atime #f) (mtime #f)) ::<void>
  (let* ([tim::(struct utimbuf)] [r::int])
    (cond [(and (SCM_FALSEP atime) (SCM_FALSEP mtime))
           (SCM_SYSCALL r (utime path NULL))]
          [else
           (set! (ref tim actime)
                 (?: (SCM_FALSEP atime) (time NULL) (Scm_GetUInteger atime)))
           (set! (ref tim modtime)
                 (?: (SCM_FALSEP mtime) (time NULL) (Scm_GetUInteger mtime)))
           (SCM_SYSCALL r (utime path (& tim)))])
    (when (< r 0) (Scm_SysError "utime failed on %s" path))))

;; set*

(when "!defined(GAUCHE_WINDOWS)" 

(define-cproc sys-setgid (gid::<int>) ::<int>
  (SCM_SYSCALL SCM_RESULT (setgid gid))
  (when (< SCM_RESULT 0) (Scm_SysError "setgid failed on %d" gid)))

(define-cproc sys-setpgid (pid::<int> pgid::<int>) ::<int>
  (SCM_SYSCALL SCM_RESULT (setpgid pid pgid))
  (when (< SCM_RESULT 0)
    (Scm_SysError "setpgid failed on process %d for pgid %d" pid pgid)))

;; The prototype of setpgrp() differs between platforms.   Since it is
;; redundant anyway, Gauche doesn't support it.
;(if (defined? "HAVE_SETPGRP")
;    (define-cproc %sys-setpgrp ()
;      "  int r = Scm_SysCall(setpgrp());
;      if (r < 0) Scm_SysError(\"setpgrp failed\");
;      SCM_RETURN(Scm_MakeInteger(r));"))

(when "defined HAVE_GETPGID"
  (define-cproc sys-getpgid (pid::<int>) ::<int>
    (SCM_SYSCALL SCM_RESULT (cast int (getpgid pid)))
    (when (< SCM_RESULT 0) (Scm_SysError "getpgid failed")))
  (initcode "Scm_AddFeature(\"gauche.sys.getpgid\", NULL);")
  )

(define-cproc sys-getpgrp () ::<int>
  (SCM_SYSCALL SCM_RESULT (cast int (getpgrp)))
  (when (< SCM_RESULT 0) (Scm_SysError "getpgrp failed")))

(define-cproc sys-setsid () ::<int>
  (SCM_SYSCALL SCM_RESULT (setsid))
  (when (< SCM_RESULT 0) (Scm_SysError "setsid failed")))

(define-cproc sys-setuid (uid::<int>) ::<int>
  (SCM_SYSCALL SCM_RESULT (setuid uid))
  (when (< SCM_RESULT 0) (Scm_SysError "setuid failed")))

;; some less-frequently used get-*

(define-cproc sys-getgroups ()
  (let* ([size::int 32]
         [glist::(.array gid_t [32])]
         [pglist::gid_t* glist])
    (loop (let* ([n::int (getgroups size pglist)])
            (when (>= n 0)
              (let* ([h '()] [t '()])
                (dotimes [i n]
                  (SCM_APPEND1 h t (Scm_MakeInteger (aref pglist i))))
                (result h)
                (break)))
            (cond [(== errno EINVAL)
                   (+= size size)
                   (set! pglist (SCM_NEW_ATOMIC_ARRAY gid_t size))]
                  [else (Scm_SysError "getgroups failed")])))))
) ;; !defined(GAUCHE_WINDOWS)

(define-cproc sys-getlogin () ::<const-cstring>? getlogin)

;; sys/times.h
;; we have emulation of times() in auxsys.c for mingw.
(define-cproc sys-times ()
  (let* ([info::(struct tms)] [r::clock_t] [tick::long])
    (SCM_SYSCALL r (times (& info)))
    (when (== r (cast clock_t -1)) (Scm_SysError "times failed"))
    (|#if| "defined(_SC_CLK_TCK)"
           (set! tick (sysconf _SC_CLK_TCK))
           (|#if| "defined(CLK_TCK)"
                  (set! tick CLK_TCK)   ; older name
                  (set! tick 100)))     ; fallback
    (result (list (Scm_MakeInteger (ref info tms_utime))
                  (Scm_MakeInteger (ref info tms_stime))
                  (Scm_MakeInteger (ref info tms_cutime))
                  (Scm_MakeInteger (ref info tms_cstime))
                  (Scm_MakeInteger tick)))))

;; sys/utsname.h
;; returns list of (sysname nodename release version machine)
(if "!defined(GAUCHE_WINDOWS)"
(define-cproc sys-uname ()
  (let* ([info::(struct utsname)])
    (when (< (uname (& info)) 0) (Scm_SysError "uname failed"))
    (result (list (SCM_MAKE_STR_COPYING (ref info sysname))
                  (SCM_MAKE_STR_COPYING (ref info nodename))
                  (SCM_MAKE_STR_COPYING (ref info release))
                  (SCM_MAKE_STR_COPYING (ref info version))
                  (SCM_MAKE_STR_COPYING (ref info machine))))))
) ;; !defined(GAUCHE_WINDOWS)

"#ifndef HOSTNAMELEN
#define HOSTNAMELEN 1024
#endif"

(if "defined HAVE_GETHOSTNAME"
  (define-cproc %sys-gethostname () ::<const-cstring>
    (let* ([buf::(.array char [HOSTNAMELEN])] [r::int])
      (SCM_SYSCALL r (gethostname buf HOSTNAMELEN))
      (when (< r 0) (Scm_SysError "gethostname failed"))
      (result buf)))
)

(if "defined HAVE_GETDOMAINNAME"
  (define-cproc %sys-getdomainname () ::<const-cstring>
    (let* ([buf::(.array char [HOSTNAMELEN])] [r::int])
      (SCM_SYSCALL r (getdomainname buf HOSTNAMELEN))
      (when (< r 0) (Scm_SysError "getdomainame failed"))
      (result buf)))
)

(define-cproc sys-environ () Scm_Environ)

(when "defined(HAVE_PUTENV) || defined(HAVE_SETENV)"
  (define-cproc sys-setenv (name::<const-cstring>
                            value::<const-cstring>
                            :optional overwrite::<boolean>)
    ::<void> Scm_SetEnv)
  (initcode "Scm_AddFeature(\"gauche.sys.setenv\", NULL);")
  )

(when "defined HAVE_UNSETENV"
  (define-cproc sys-unsetenv (name::<const-cstring>) ::<void> unsetenv)
  (initcode "Scm_AddFeature(\"gauche.sys.unsetenv\", NULL);")
  )

;; ctermid
(define-cproc sys-ctermid () ::<const-cstring>
  (|#if| "defined(GAUCHE_WINDOWS)"
         (result "CON")
         (let* ([buf::(.array char [(+ L_ctermid 1)])])
           (result (ctermid buf)))))

;; localeconv

(define-cise-expr lc-elt
  [(_ conv sym) `(Scm_Cons ',sym (,conv (-> lc ,sym)))])

(define-cproc sys-localeconv ()
  (let* ([lc::(struct lconv*) (localeconv)])
    (result (list (lc-elt SCM_MAKE_STR_COPYING decimal_point)
                  (lc-elt SCM_MAKE_STR_COPYING thousands_sep)
                  (lc-elt SCM_MAKE_STR_COPYING grouping)
                  (lc-elt SCM_MAKE_STR_COPYING int_curr_symbol)
                  (lc-elt SCM_MAKE_STR_COPYING currency_symbol)
                  (lc-elt SCM_MAKE_STR_COPYING mon_decimal_point)
                  (lc-elt SCM_MAKE_STR_COPYING mon_thousands_sep)
                  (lc-elt SCM_MAKE_STR_COPYING mon_grouping)
                  (lc-elt SCM_MAKE_STR_COPYING positive_sign)
                  (lc-elt SCM_MAKE_STR_COPYING negative_sign)
                  (lc-elt SCM_MAKE_INT int_frac_digits)
                  (lc-elt SCM_MAKE_INT frac_digits)
                  (lc-elt SCM_MAKE_BOOL p_cs_precedes)
                  (lc-elt SCM_MAKE_BOOL p_sep_by_space)
                  (lc-elt SCM_MAKE_BOOL n_cs_precedes)
                  (lc-elt SCM_MAKE_BOOL n_sep_by_space)
                  (lc-elt SCM_MAKE_INT p_sign_posn)
                  (lc-elt SCM_MAKE_INT n_sign_posn)))))

;; Local variables:
;; mode: scheme
;; end:
