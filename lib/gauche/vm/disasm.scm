;;;
;;; Disassembler - print VM compiled code in (sort of) human-readable way
;;;

(define (DISASM proc)
  (disasm-code (closure-code proc)))

(define (disasm-code code)
  (let ((ihash (make-hash-table))
        (label 0))
    
    (define (pass1 code)
      (unless (null? code)
        (if (hash-table-exists? ihash code)
            (hash-table-put! ihash code #t)
            (let* ((insn (and (vm-instruction? (car code))
                              (vm-insn-inspect (car code))))
                   (op   (and insn (car insn))))
              (hash-table-put! ihash code #f)
              (if insn
                  (cond ((member op '("IF" "PRE-CALL"))
                         (pass1 (cadr code))
                         (pass1 (cddr code)))
                        ((equal? op "LET")
                         (pass1 (cddr code)))
                        ((equal? op "LAMBDA")
                         (pass1 (caddr code))
                         (pass1 (cdddr code)))
                        (else
                         (pass1 (cdr code))))
                  (pass1 (cdr code)))
              ))))

    (define (do-indent count)
      (when (> count 0) (display "  ") (do-indent (- count 1))))
    (define (comment-indent count)
      (when (< count 15) (display "  ") (comment-indent (+ count 1))))

    (define (print-code code indent)
      (do-indent indent)
      (if (null? code)
          (format #t "RET\n\n")
          (let* ((insn (and (vm-instruction? (car code))
                            (vm-insn-inspect (car code))))
                 (op   (and insn (car insn))))
            (if insn
                (cond ((member op '("IF" "PRE-CALL"))
                       (format #t "~A\n" op)
                       (pass2 (cadr code) (+ indent 1))
                       (pass2 (cddr code) indent))
                      ((equal? op "LET")
                       (format #t "~A~S\n" op (cdr insn))
                       (do-indent indent)
                       (comment-indent indent)
                       (format #t ";; ")
                       (write-limited (cadr code) 40)
                       (newline)
                       (pass2 (cddr code) (+ indent 1)))
                      ((equal? op "LAMBDA")
                       (format #t "~A~S\n" op (cdr insn))
                       (do-indent indent)
                       (comment-indent indent)
                       (format #t ";; ")
                       (write-limited (cadr code) 40)
                       (newline)
                       (pass2 (caddr code) (+ indent 1))
                       (pass2 (cdddr code) indent))
                      ((equal? op "POPENV")
                       (format #t "~A\n" op)
                       (pass2 (cdr code) (- indent 1)))
                      ((member op '("SET" "GREF"))
                       (format #t "~A ~S\n" op (cadr code))
                       (pass2 (cddr code) indent))
                      ((null? (cdr insn))
                       (format #t "~A\n" op)
                       (pass2 (cdr code) indent))
                      (else
                       (format #t "~A~S\n" op (cdr insn))
                       (pass2 (cdr code) indent)))
                (cond ((is-a? (car code) <source-info>)
                       (comment-indent indent)
                       (format #t ";; ")
                       (write-limited (source-info (car code)) 40)
                       (newline)
                       (pass2 (cdr code) indent))
                      (else
                       (format #t "~S\n" (car code))
                       (pass2 (cdr code) indent)))))
          ))
    
    (define (pass2 code indent)
      (let ((e (hash-table-get ihash code #f)))
        (cond ((eq? e #t)
               (format #t "L~A::\n" label)
               (hash-table-put! ihash code label)
               (set! label (+ label 1))
               (print-code code indent))
              ((number? e)
               (do-indent indent)
               (format #t "GOTO L~A\n\n" e))
              (else
               (print-code code indent)))
        ))

    (pass1 code)
    (pass2 code 0)
    ))
            

  