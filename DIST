#!/bin/sh
TGZ_DEST="$HOME/shiro.dreamhost.com/scheme/vault/"
MAN_DEST="$HOME/shiro.dreamhost.com/scheme/gauche/man/"
DOC_DEST="../test"
RPMDIR="$HOME/rpm"
CHANGELOG_DEST="$HOME/shiro.dreamhost.com/scheme/gauche/ChangeLog.txt"
XTRA_TEST_DIR="$HOME/src/test"

while [ $# -gt 0 ]; do
  case $1 in
    gen) gen=yes; shift ;;
    doc) doc=yes; shift ;;
    docs) doc=yes; docs=yes; shift ;;
    tgz) tgz=yes; shift ;;
    test) test=yes; shift ;;
    testcode) testcode=yes; shift ;;
    testclean) testclean=yes; shift ;;
    rpm)  rpm=yes; shift;;
    rpmfiles) rpmfiles=yes; shift;;
    mingw) mingw=yes; shift;;
    *) echo "DIST [doc][docs][tgz][test][testclean][rpm][rpmfiles]"; exit 0;;
  esac
done

if [ "$gen" = "yes" ]; then
  rm -rf configure gc/configure
  autoconf
  (cd gc; autoconf)
  patch -u -p0 < doc/mingw-memo.txt
fi

if [ "$tgz" = "yes" ]; then
  if [ -f Makefile ]; then make maintainer-clean; fi
  if [ -f examples/spigot/Makefile ]; then 
    (cd examples/spigot; make maintainer-clean);
  fi
  ./DIST gen
  ./configure --enable-threads=pthreads -C || exit 1
  (cd src; for stub in *.stub; do make `echo $stub | sed 's/\.stub/.c/'` ; done) || exit 1
  (cd src; make autoloads.c) || exit 1
  (cd src; make builtin-syms.c) || exit 1
  (cd src; make vminsn.c) || exit 1
  (cd ext/charconv/; make GOSH=gosh eucj2ucs.c) || exit 1
  (cd ext/charconv/; make GOSH=gosh guess_tab.c) || exit 1
  (cd ext/charconv/data; make GOSH=gosh) || exit 1
  (cd doc; make GOSH=gosh texi) || exit 1
  make distclean || exit 1

  if [ ! -f VERSION ]; then echo "No VERSION; something wrong?"; exit 1; fi
  VERSION=`cat VERSION`
  rm -rf ../Gauche-$VERSION

  rm -f DIST_EXCLUDE_X
  cat DIST_EXCLUDE > DIST_EXCLUDE_X
  find . -name CVS -print -prune >> DIST_EXCLUDE_X

  escm -i gosh -o INSTALL INSTALL.esc
  LANG=ja_JP escm -i gosh -o INSTALL.eucjp INSTALL.esc

  mkdir ../Gauche-$VERSION
  tar cvfX - DIST_EXCLUDE_X . | (cd ../Gauche-$VERSION; tar xf -)
  (cd ..; tar cvf - Gauche-$VERSION | gzip -9 > Gauche-$VERSION.tgz)
  rm -rf ../Gauche-$VERSION
#  if [ -d $TGZ_DEST ]; then
#    mv ../Gauche-$VERSION.tgz $TGZ_DEST
#    cp ChangeLog $CHANGELOG_DEST
#  fi
fi

if [ "$doc" = "yes" ]; then
  (cd doc; make texi)
  for lang in j e; do
    rm -rf $DOC_DEST/gauche-ref$lang
    mkdir $DOC_DEST/gauche-ref$lang
    cp doc/*.texi doc/Makefile doc/extract $DOC_DEST/gauche-ref$lang/
    (cd $DOC_DEST/gauche-ref$lang; make gauche-ref${lang}_toc.html; rm -f *.texi extract Makefile)
  done
fi

if [ "$docs" = "yes" ]; then
  rm -rf $MAN_DEST
  mkdir $MAN_DEST
  for lang in j e; do
    (cd doc; make gauche-ref$lang.html; gzip gauche-ref$lang.html; mv gauche-ref$lang.html.gz $TGZ_DEST)
    (cd $DOC_DEST; tar czf $TGZ_DEST/gauche-ref$lang.tgz gauche-ref$lang)
    cp $DOC_DEST/gauche-ref$lang/* $MAN_DEST
  done
fi

if [ "$test" = "yes" ]; then
  if [ ! -f VERSION ]; then echo "No VERSION; do DIST tgz first"; exit 1; fi
  VERSION=`cat VERSION`
  if [ ! -f ../Gauche-$VERSION.tgz ]; then echo "No tarball; do DIST tgz first"; exit 1; fi
  mkdir -p ../test
  rm -rf ../test/Gauche-$VERSION ../test/test-inst
  cd ../test
  mkdir -p test-inst
  tar xzvf ../Gauche-$VERSION.tgz
  cd Gauche-$VERSION
  ./configure --enable-threads=pthreads --prefix=`pwd`/../test-inst
  make
  make -s test
  make install
  make install-check
  cd ..
  testgosh=`pwd`/test-inst/bin/gosh
  if [ -f $XTRA_TEST_DIR/r4rstest/r4rstest.scm ]; then
    (cd $XTRA_TEST_DIR/r4rstest/ && make GOSH=$testgosh test)
  fi
fi

if [ "$testcode" = "yes" ]; then
  if [ ! -f VERSION ]; then echo "No VERSION; do DIST tgz first"; exit 1; fi
  VERSION=`cat VERSION`
  if [ ! -f ../Gauche-$VERSION.tgz ]; then echo "No tarball; do DIST tgz first"; exit 1; fi
  mkdir -p ../test
  rm -rf ../test/Gauche-$VERSION
  cd ../test
  tar xzvf ../Gauche-$VERSION.tgz >& /dev/null
  cd Gauche-$VERSION
  rm -f testcode.log
  echo "EUC-JP ----------------------------------------------------"
  ./configure -C --enable-threads=pthreads --enable-multibyte=euc-jp >> testcode.log 2>&1
  make -s >> testcode.log 2>&1
  make -s test
  make -s distclean
  echo "UTF-8 -----------------------------------------------------"
  ./configure -C --enable-threads=pthreads --enable-multibyte=utf-8  >> testcode.log 2>&1
  make -s >> testcode.log 2>&1
  make -s test
  make -s distclean
  echo "SJIS ------------------------------------------------------"
  ./configure -C --enable-threads=pthreads --enable-multibyte=sjis   >> testcode.log 2>&1
  make -s >> testcode.log 2>&1
  make -s test
  make -s distclean
  echo "NONE ------------------------------------------------------"
  ./configure -C --enable-threads=pthreads --enable-multibyte=none   >> testcode.log 2>&1
  make -s >> testcode.log 2>&1
  make -s test
fi

if [ "$testclean" = "yes" ]; then
  rm -rf ../test/Gauche ../test/test-inst
  rm -rf ../test/test.log ../test/temp.o ../test/tmp1.o
  if [ -f VERSION ]; then rm -rf ../test/Gauche-`cat VERSION`; fi
fi

if [ "$rpmfiles" = "yes" ]; then
  # NB: you should be careful to run this _before_ installing any
  # additional Gauche packages.
  rm -f rpmfiles-common.txt rpmfiles-encoding.txt rpmfiles-gdbm.txt
  if [ ! -f VERSION ]; then echo "No VERSION; do DIST tgz first"; exit 1; fi
  VERSION=`cat VERSION`
  find /usr/share/gauche/$VERSION -type f -print | grep -v 'dbm/[ong]dbm' > rpmfiles-common.txt
  find /usr/share/gauche/$VERSION -type f -print | grep 'dbm/[ong]dbm' > rpmfiles-gdbm.txt
  find /usr/lib/gauche/$VERSION -type f -print | grep -v '/[ong]dbm' > rpmfiles-encoding.txt
  find /usr/lib/gauche/$VERSION -type f -print | grep '/[ong]dbm' >> rpmfiles-gdbm.txt
fi

if [ "$rpm" = "yes" ]; then
  if [ ! -f VERSION ]; then echo "No VERSION; do DIST tgz first"; exit 1; fi
  VERSION=`cat VERSION`
  if [ ! -f ../Gauche-$VERSION.tgz ]; then echo "No tarball; do DIST tgz first"; exit 1; fi
  rm -f $RPMDIR/SOURCES/Gauche-$VERSION.tgz
  cp ../Gauche-$VERSION.tgz $RPMDIR/SOURCES/
  spec=$RPMDIR/SPECS/Gauche.spec
#  echo "UTF8, i386 ----------------------------------------------"
#  rm -f $spec
#  cat Gauche.spec | sed 's/%define encoding .*/%define encoding utf8/' > $spec
#  rpm -bb --clean $spec
#  echo "UTF8, i686 ----------------------------------------------"
#  rm -f $spec
#  cat Gauche.spec | sed 's/%define encoding .*/%define encoding utf8/' > $spec
#  rpmbuild -bb --clean --target i686 $spec
#  echo "EUC, i386 -----------------------------------------------"
#  rm -f $spec
#  cat Gauche.spec | sed 's/%define encoding .*/%define encoding eucjp/' > $spec
#  rpm -bb --clean $spec
  echo "EUC, i686 -----------------------------------------------"
  rm -f $spec
  cat Gauche.spec | sed 's/%define encoding .*/%define encoding eucjp/' > $spec
  rpmbuild -ba --clean --target i686 $spec
  echo "Finishing..."
#  mv $RPMDIR/RPMS/i386/Gauche-eucjp-*.rpm $TGZ_DEST
#  mv $RPMDIR/RPMS/i386/Gauche-utf8-*.rpm $TGZ_DEST
#  mv $RPMDIR/RPMS/i686/Gauche-eucjp-*.rpm $TGZ_DEST
#  mv $RPMDIR/RPMS/i686/Gauche-utf8-*.rpm $TGZ_DEST
#  mv $RPMDIR/SRPMS/Gauche-*.rpm $TGZ_DEST
fi

#
# MinGW specific packager
#
if [ "$mingw" = "yes" ]; then
  mingwdir=${MINGWDIR:-/cygdrive/c/mingw}
  cyggosh=${CYGGOSH:-/usr/local/bin/gosh}

  PATH=$mingwdir/bin:$PATH
  case `gcc --version` in
    *mingw*) ;;
    *) echo "Set PATH to have MinGW bin directory first"
       exit 1;;
  esac
  if [ -f Makefile ]; then make maintainer-clean; fi
  if [ -f examples/spigot/Makefile ]; then 
    (cd examples/spigot; make maintainer-clean);
  fi
  distdir=`pwd`/../Gauche-mingw-dist
  rm -rf $distdir
  ./DIST gen
  ./configure --build=i686-pc-mingw32 --prefix=$distdir/Gauche
  if [ ! -f VERSION ]; then echo "No VERSION; something wrong?"; exit 1; fi
  VERSION=`cat VERSION`
  make
  # use Cygwin's gosh to install stuff
  make GOSH=$cyggosh install
  (cd src; make GOSH=$cyggosh install-mingw)
  rm -rf $distdir/Gauche/bin/gauche-install
  rm -rf $distdir/Gauche/bin/gauche-package
  rm -rf $distdir/Gauche/bin/gauche-config
  rm -rf $distdir/Gauche/bin/gauche-cesconv
  rm -rf $distdir/Gauche/lib/libgauche.dll*
  rm -rf $distdir/Gauche/lib/gauche/$VERSION/*/gosh.exe
  rm -rf $distdir/Gauche/lib/gauche/$VERSION/*/libgauche.dll
  cp COPYING $distdir/Gauche
  cp $mingwdir/bin/mingwm10.dll $distdir/Gauche/bin
  (cd $distdir; zip -r Gauche-mingw-$VERSION.zip Gauche)
fi
