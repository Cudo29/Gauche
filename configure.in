dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/gauche.h)
AC_CONFIG_HEADER(src/gauche/config.h)
AC_CANONICAL_SYSTEM

dnl ==========================================================
dnl Checks for programs.
AC_PROG_CC
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PROG_INSTALL

dnl ==========================================================
dnl Checks for libraries.
AC_CHECK_LIB(m, sin) dnl needed to check trunc and rint below

dnl ===========================================================
dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS(sys/time.h)
AC_CHECK_HEADERS(glob.h)
AC_CHECK_HEADERS(dlfcn.h)

dnl ===========================================================
dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_INLINE
AC_STRUCT_TM
AC_CHECK_SIZEOF(long)
dnl Checks non-POSIX members of system structure
AC_CACHE_CHECK(struct group has gr_passwd, ac_cv_struct_gr_passwd, [
AC_TRY_COMPILE([#include <grp.h>], [
struct group g;
const char *p = g.gr_passwd;
], ac_cv_struct_gr_passwd=yes, ac_cv_struct_gr_passwd=no)])

if test "$ac_cv_struct_gr_passwd" = yes; then
AC_DEFINE(HAVE_GR_PASSWD)
fi

AC_CACHE_CHECK(struct passwd has pw_passwd, ac_cv_struct_pw_passwd, [
AC_TRY_COMPILE([#include <pwd.h>], [
struct passwd pw;
const char *p = pw.pw_passwd;
], ac_cv_struct_pw_passwd=yes, ac_cv_struct_pw_passwd=no)])

if test "$ac_cv_struct_pw_passwd" = yes; then
AC_DEFINE(HAVE_PW_PASSWD)
fi

AC_CACHE_CHECK(struct passwd has pw_gecos, ac_cv_struct_pw_gecos, [
AC_TRY_COMPILE([#include <pwd.h>], [
struct passwd pw;
const char *p = pw.pw_gecos;
], ac_cv_struct_pw_gecos=yes, ac_cv_struct_pw_gecos=no)])

if test "$ac_cv_struct_pw_gecos" = yes; then
AC_DEFINE(HAVE_PW_GECOS)
fi

AC_CACHE_CHECK(struct passwd has pw_class, ac_cv_struct_pw_class, [
AC_TRY_COMPILE([#include <pwd.h>], [
struct passwd pw;
const char *p = pw.pw_class;
], ac_cv_struct_pw_class=yes, ac_cv_struct_pw_class=no)])

if test "$ac_cv_struct_pw_class" = yes; then
AC_DEFINE(HAVE_PW_CLASS)
fi

dnl ===========================================================
dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL

AC_CHECK_FUNCS(trunc rint)
AC_CHECK_FUNCS(symlink)
AC_CHECK_FUNCS(mkstemp)

dnl Checks if crypt() exists and whether it's in libc or libcrypt.
AC_CHECK_FUNC(crypt, HAVE_CRYPT=yes, HAVE_CRYPT=no)
if test $HAVE_CRYPT = no; then
AC_CHECK_LIB(crypt, crypt, HAVE_CRYPT=yes; LIBS="-lcrypt $LIBS", HAVE_CRYPT=no)
fi
AC_DEFINE(HAVE_CRYPT)

dnl Checs if dlopen exists, and if it's in libc or libdl.
AC_CHECK_FUNC(dlopen, HAVE_DLOPEN=yes, HAVE_DLOPEN=no)
if test $HAVE_DLOPEN = no; then
AC_CHECK_LIB(dl, dlopen, HAVE_DLOPEN=yes; LIBS="-ldl $LIBS", HAVE_DLOPEN=no)
fi
AC_DEFINE(HAVE_DLOPEN)

dnl Checks compiler options for dynamic link.
dnl
dnl  SHLIB_SO_SUFFIX     suffix of dynamic loadable module, e.g. ".so"
dnl  SHLIB_SO_CFLAGS     flags to compile files which is dynamically loadable,
dnl                      e.g. "-fpic"
dnl  SHLIB_SO_LDFLAGS    flags to link files to create dynamically loadable
dnl                      module, e.g. "-shared -o"
dnl  SHLIB_MAIN_LDFLAGS  flags required to compile a main program which
dnl                      exposes symbols to be referred by the dynamically
dnl                      loaded module, e.g. "-rdynamic"
dnl  LIBGAUCHE_SO        defined as "libgauche.$(SHLIB_SO_SUFFIX)" if
dnl                      system supports dso.  empty otherwise.

AC_MSG_CHECKING(how to make dynamic loadable module)
case $host in
  *-linux-gnu|*freebsd*|*netbsd*)
    SHLIB_SO_CFLAGS="-fpic"
    SHLIB_SO_LDFLAGS="-shared -o"
    SHLIB_SO_SUFFIX="so"
    SHLIB_MAIN_LDFLAGS="-rdynamic"
    SHLIB_OK=ok
    ;;
  mips-sgi-irix*)
    if test X$CC = Xgcc; then
      SHLIB_SO_CFLAGS="-fpic"
    else
      SHLIB_SO_CFLAGS="-KPIC"
    fi
    SHLIB_SO_LDFLAGS="-shared -o"
    SHLIB_SO_SUFFIX="so"
    SHLIB_MAIN_LDFLAGS=""
    SHLIB_OK=ok
    ;;
  *solaris*)
    if test X$CC = Xgcc; then
      SHLIB_SO_CFLAGS="-fpic"
      SHLIB_SO_LDFLAGS="-shared -o"
    else
      SHLIB_SO_CFLAGS="-Kpic"
      SHLIB_SO_LDFLAGS="-G -h"
    fi
    SHLIB_SO_SUFFIX="so"
    SHLIB_MAIN_LDFLAGS=""
    SHLIB_OK=ok
    ;;
  *)
    SHLIB_SO_CFLAGS=""
    SHLIB_SO_LDFLAGS=""
    SHLIB_SO_SUFFIX=""
    SHLIB_MAIN_LDFLAGS=""
    SHLIB_OK=unknown
    ;;
esac
if test X$SHLIB_OK = Xok; then
  LIBGAUCHE_SO="libgauche.$SHLIB_SO_SUFFIX"
else
  LIBGAUCHE_SO=
fi
AC_SUBST(SHLIB_SO_CFLAGS)
AC_SUBST(SHLIB_SO_LDFLAGS)
AC_SUBST(SHLIB_SO_SUFFIX)
AC_SUBST(SHLIB_MAIN_LDFLAGS)
AC_SUBST(LIBGAUCHE_SO)
AC_DEFINE_UNQUOTED(SHLIB_SO_SUFFIX, "$SHLIB_SO_SUFFIX")
AC_MSG_RESULT($SHLIB_OK)

dnl ===========================================================
dnl Add version macro
GAUCHE_VERSION=`cat VERSION`
AC_SUBST(GAUCHE_VERSION)
AC_DEFINE_UNQUOTED(GAUCHE_VERSION, "$GAUCHE_VERSION")

dnl ===========================================================
dnl Configure extensions
changequote(<<, >>)dnl
extensions=`grep '^SUBDIRS=' ext/Makefile | sed -e 's/SUBDIRS=//' -e 's@[A-Za-z0-9_-][A-Za-z0-9_-]*@ext/&@g'`
changequote([,])dnl
AC_CONFIG_SUBDIRS($extensions)

dnl ===========================================================
dnl Create output files
AC_OUTPUT(src/Makefile src/gauche-config lib/Makefile 
          Makefile)
